{"version":3,"sources":["components/Counter/Value/Value.module.css","components/SetCounter/SetValue/SetValue.module.css","components/Counter/Changes/Changes.module.css","App.module.css","components/Button/Button.module.css","components/Counter/Value/DisplayValue.tsx","components/Button/Button.tsx","components/Counter/Changes/Changes.tsx","components/Counter/Counter.tsx","components/SetCounter/SetValue/SetValue.tsx","components/SetCounter/Set/SetButton.tsx","components/SetCounter/SetCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","DisplayValue","props","className","s","wrap","displayValue","maxValue","red","num","default","Button","restProps","finalClassName","Changes","disabled","isIncButtonDisabled","onClick","inc","reset","isResetButtonDisabled","Counter","SetValue","finalClassNameMax","isMaxInputError","error","finalClassNameStart","isStartInputError","value","title","type","onChange","e","changeMaxValue","currentTarget","startValue","changeStartValue","SetButton","isSetButtonDisabled","setNewValue","SetCounter","App","useState","setMaxValue","setStartValue","setDisplayValue","setIsSetButtonDisabled","setIsIncButtonDisabled","setIsResetButtonDisabled","setIsMaxInputError","setIsStartInputError","useEffect","counterAsString","localStorage","getItem","counter","JSON","parse","valueDisabledBtnSet","valueDisabledBtnInc","valueDisabledBtnReset","errorMaxBtn","errorStartBtn","setItem","stringify","wrapper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f99ad5ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Value_wrap__3cddL\",\"red\":\"Value_red__3Hj9R\",\"black\":\"Value_black__38Wu1\",\"default\":\"Value_default__3t6TO\",\"num\":\"Value_num__3ChJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"SetValue_wrap__3f-un\",\"value\":\"SetValue_value__3h8vL\",\"default\":\"SetValue_default__EyLgV\",\"error\":\"SetValue_error__3SPxP\",\"title\":\"SetValue_title__1bZxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Changes_wrap__3FnhT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"wrap\":\"App_wrap__29kNz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3Zlg-\"};","import React from 'react';\nimport s from './Value.module.css';\n\ntype DisplayValueType = {\n    maxValue: number\n    displayValue: number | string\n}\n\n\nconst DisplayValue = (props: DisplayValueType) => {\n\n\n    let finalStyle = () => {\n        if (props.displayValue === +props.maxValue) {\n            return `${s.red} ${s.num} ${s.default}`\n        }\n        if (typeof props.displayValue === 'number') {\n            return `${s.num} ${s.default}`\n        }\n        if (props.displayValue === \"incorrect value\") {\n            return `${s.red} ${s.default} `\n        } else {\n            return `${s.default}`\n        }\n\n    }\n\n    return (\n        <div className={s.wrap}>\n            <div className={finalStyle()}>{props.displayValue}</div>\n        </div>\n    );\n};\n\nexport default DisplayValue;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\nimport s from '../Button/Button.module.css'\n\ntype DefaultButtonType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype ButtonType = DefaultButtonType & {}\n\nconst Button: React.FC<ButtonType> = (\n    {...restProps},\n) => {\n    const finalClassName = `${s.default}`\n    return (\n\n        <button className={finalClassName} {...restProps}  />\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport s from './Changes.module.css';\nimport Button from \"../../Button/Button\";\n\n\ntype ChangesType = {\n    inc: () => void\n    displayValue: number | string\n    maxValue: number\n    reset: () => void\n    isIncButtonDisabled: boolean\n    isResetButtonDisabled: boolean\n}\n\nconst Changes = (props: ChangesType) => {\n\n\n    return (\n        <div className={s.wrap}>\n            <Button\n                disabled={props.isIncButtonDisabled}\n                onClick={props.inc}>\n                inc\n            </Button>\n            <Button onClick={props.reset} disabled={props.isResetButtonDisabled}>\n                reset\n            </Button>\n        </div>\n    );\n};\n\nexport default Changes;\n","import React from 'react';\nimport DisplayValue from \"./Value/DisplayValue\";\nimport Changes from \"./Changes/Changes\";\n\ntype CounterType = {\n    inc: () => void\n    displayValue: number | string\n    maxValue: number\n    reset: () => void\n    isIncButtonDisabled: boolean\n    isResetButtonDisabled: boolean\n\n}\n\nconst Counter: React.FC<CounterType> = (\n    {displayValue, maxValue, inc, reset, isIncButtonDisabled, isResetButtonDisabled}\n) => {\n    return (\n        <>\n            <DisplayValue displayValue={displayValue} maxValue={maxValue}/>\n            <Changes inc={inc} displayValue={displayValue} maxValue={maxValue} reset={reset}\n                     isIncButtonDisabled={isIncButtonDisabled}\n                     isResetButtonDisabled={isResetButtonDisabled}/>\n        </>\n    );\n};\n\nexport default Counter;","import React, {ChangeEvent} from 'react';\nimport s from \"../SetValue/SetValue.module.css\";\n\ntype SetValueType = {\n    startValue: number\n    maxValue: number\n    changeMaxValue: (e: number) => void\n    changeStartValue: (e: number) => void\n    isMaxInputError: boolean\n    isStartInputError: boolean\n\n}\n\nconst SetValue = (props: SetValueType) => {\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changeMaxValue(+e.currentTarget.value)\n    }\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => props.changeStartValue(+e.currentTarget.value)\n    const finalClassNameMax = `${s.default} ${props.isMaxInputError ? s.error : ''}`\n    const finalClassNameStart = `${s.default} ${props.isStartInputError ? s.error : ''} `\n    return (\n        <div className={s.wrap}>\n            <div className={s.value}>\n                <div className={s.title}>max value:</div>\n                <input className={finalClassNameMax} type=\"number\" value={props.maxValue} onChange={changeMaxValue}/>\n            </div>\n            <div className={s.value}>\n                <div className={s.title}>start value:</div>\n                <input className={finalClassNameStart} type=\"number\" value={props.startValue}\n                       onChange={changeStartValue}/>\n            </div>\n        </div>\n    );\n};\n\nexport default SetValue;","import React from 'react';\nimport s from \"../../Counter/Changes/Changes.module.css\";\nimport Button from \"../../Button/Button\";\n\ntype SetType = {\n    startValue: number\n    maxValue: number\n    setNewValue: () => void\n    isSetButtonDisabled: boolean\n}\n\nconst SetButton = (props: SetType) => {\n\n    return (\n        <div className={s.wrap}>\n            <Button disabled={props.isSetButtonDisabled} onClick={props.setNewValue}>\n                set\n            </Button>\n        </div>\n    );\n};\n\nexport default SetButton;\n","import React from 'react';\nimport SetValue from \"./SetValue/SetValue\";\nimport SetButton from \"./Set/SetButton\";\n\ntype SetCounterType = {\n    startValue: number\n    maxValue: number\n    changeMaxValue: (e: number) => void\n    changeStartValue: (e: number) => void\n    setNewValue: () => void\n    isSetButtonDisabled: boolean\n    isMaxInputError: boolean\n    isStartInputError: boolean\n}\n\nconst SetCounter = (props: SetCounterType) => {\n    return (\n        <>\n            <SetValue startValue={props.startValue}\n                      maxValue={props.maxValue}\n                      changeMaxValue={props.changeMaxValue}\n                      changeStartValue={props.changeStartValue}\n                      isMaxInputError={props.isMaxInputError}\n                      isStartInputError={props.isStartInputError}\n            />\n            <SetButton startValue={props.startValue}\n                       maxValue={props.maxValue}\n                       setNewValue={props.setNewValue}\n                       isSetButtonDisabled={props.isSetButtonDisabled}/>\n        </>\n    );\n};\n\nexport default SetCounter;","import React, {useEffect, useState} from 'react';\n\nimport s from './App.module.css';\nimport Counter from \"./components/Counter/Counter\";\nimport SetCounter from \"./components/SetCounter/SetCounter\";\n\n\nfunction App() {\n    const [maxValue, setMaxValue] = useState(0)\n    const [startValue, setStartValue] = useState(0)\n    const [displayValue, setDisplayValue] = useState<number | string>('')\n    const [isSetButtonDisabled, setIsSetButtonDisabled] = useState(true)\n    const [isIncButtonDisabled, setIsIncButtonDisabled] = useState(true)\n    const [isResetButtonDisabled, setIsResetButtonDisabled] = useState(true)\n    const [isMaxInputError, setIsMaxInputError] = useState<boolean>(true)\n    const [isStartInputError, setIsStartInputError] = useState<boolean>(true)\n\n\n    useEffect(() => {\n        let counterAsString = localStorage.getItem('counter')\n\n        if (counterAsString) {\n            const counter = JSON.parse(counterAsString)\n            setMaxValue(counter.maxValue)\n            setStartValue(counter.startValue)\n            setDisplayValue(counter.value)\n            setIsSetButtonDisabled(counter.valueDisabledBtnSet)\n            setIsIncButtonDisabled(counter.valueDisabledBtnInc)\n            setIsResetButtonDisabled(counter.valueDisabledBtnReset)\n            setIsMaxInputError(counter.errorMaxBtn)\n            setIsStartInputError(counter.errorStartBtn)\n        }\n    }, [])\n\n    useEffect(() => {\n\n        const counter = {\n            maxValue,\n            startValue,\n            value: displayValue,\n            valueDisabledBtnSet: isSetButtonDisabled,\n            valueDisabledBtnInc: isIncButtonDisabled,\n            valueDisabledBtnReset: isResetButtonDisabled,\n            errorMaxBtn: isMaxInputError,\n            errorStartBtn: isStartInputError\n        }\n        localStorage.setItem('counter', JSON.stringify(counter))\n    }, [maxValue, startValue, displayValue, isSetButtonDisabled, isIncButtonDisabled, isResetButtonDisabled, isMaxInputError, isStartInputError])\n\n    useEffect(() => {\n        if (maxValue === startValue) {\n            setIsStartInputError(true)\n            setIsMaxInputError(true)\n        }\n        if (maxValue > startValue) {\n            setIsMaxInputError(false)\n            setIsStartInputError(false)\n        }\n        if (maxValue < startValue) {\n            setIsMaxInputError(true)\n            setIsStartInputError(true)\n        }\n        if (startValue < 0) {\n            setIsStartInputError(true)\n        }\n        if (displayValue === maxValue) {\n            setIsIncButtonDisabled(true)\n        }\n\n    }, [startValue, maxValue, displayValue])\n\n\n    const changeMaxValue = (maxValue: number) => {\n        setMaxValue(maxValue)\n        setIsIncButtonDisabled(true)\n        setIsResetButtonDisabled(true)\n        if (maxValue === startValue || maxValue < startValue || startValue < 0) {\n            setIsSetButtonDisabled(true)\n            setDisplayValue(\"incorrect value\")\n        } else {\n            setIsSetButtonDisabled(false)\n            setDisplayValue(\"enter values and press 'set'\")\n        }\n    }\n\n    const changeStartValue = (startValue: number) => {\n        setStartValue(startValue)\n        setIsIncButtonDisabled(true)\n        setIsResetButtonDisabled(true)\n        if (maxValue === startValue || maxValue < startValue || startValue < 0) {\n            setIsSetButtonDisabled(true)\n            setDisplayValue(\"incorrect value\")\n        } else {\n\n        }\n    }\n    const setNewValue = () => {\n        setIsSetButtonDisabled(true)\n        setDisplayValue(startValue)\n        setIsIncButtonDisabled(false)\n        setIsResetButtonDisabled(false)\n    }\n    const increment = () => {\n        setDisplayValue(+displayValue + 1)\n    }\n    const reset = () => {\n        setDisplayValue(startValue)\n        setIsIncButtonDisabled(false)\n    }\n\n\n    return (\n        <>\n            <div className={s.wrapper}>\n                <div className={s.wrap}>\n                    <SetCounter startValue={startValue}\n                                maxValue={maxValue}\n                                changeMaxValue={changeMaxValue}\n                                changeStartValue={changeStartValue}\n                                setNewValue={setNewValue}\n                                isMaxInputError={isMaxInputError}\n                                isStartInputError={isStartInputError}\n                                isSetButtonDisabled={isSetButtonDisabled}\n                    />\n                </div>\n                <div className={s.wrap}>\n                    <Counter inc={increment}\n                             reset={reset}\n                             displayValue={displayValue}\n                             maxValue={maxValue}\n                             isIncButtonDisabled={isIncButtonDisabled}\n                             isResetButtonDisabled={isResetButtonDisabled}/>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}